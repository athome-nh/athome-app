 return Padding(
            padding: EdgeInsets.symmetric(horizontal: getWidth(context, 1.5)),
            child: Container(
              width: getWidth(context, 45),
              height: getWidth(context, 28),
              decoration: BoxDecoration(
                  border: Border.all(color: mainColorBlack.withOpacity(0.1)),
                  // color: mainColorLightGrey,
                  borderRadius: BorderRadius.circular(15)),
              child: Stack(
                alignment:
                    lang == "en" ? Alignment.topLeft : Alignment.topRight,
                children: [
                  Stack(
                    alignment: lang == "en"
                        ? Alignment.bottomLeft
                        : Alignment.bottomRight,
                    children: [
                      Center(
                        child: Column(
                          // crossAxisAlignment: CrossAxisAlignment.center,
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            Column(
                              children: [
                                SizedBox(
                                  height: 5,
                                ),
                                GestureDetector(
                                  onTap: () {
                                    productrovider.setidItem(product.id!);
                                    Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                          builder: (context) =>
                                              const Oneitem()),
                                    );
                                  },
                                  child: CachedNetworkImage(
                                    imageUrl: dotenv.env['imageUrlServer']! +
                                        product.coverImg,
                                    placeholder: (context, url) =>
                                        Image.asset(
                                            "assets/images/Logo-Type-2.png"),
                                    errorWidget: (context, url, error) =>
                                        Image.asset(
                                            "assets/images/Logo-Type-2.png"),
                                    filterQuality: FilterQuality.low,
                                    width: getWidth(context, 30),
                                    height: getWidth(context, 30),
                                  ),
                                ),
                                const SizedBox(
                                  height: 5,
                                ),
                                Text(
                                  lang == "en"
                                      ? product.nameEn.toString()
                                      : lang == "ar"
                                          ? product.nameAr.toString()
                                          : product.nameKu.toString(),
                                  textAlign: TextAlign.center,
                                  maxLines: 1,
                                  style: TextStyle(
                                      color: mainColorBlack,
                                      fontFamily: mainFontnormal,
                                      fontSize: 14),
                                ),
                                const SizedBox(
                                  height: 3,
                                ),
                                Text(
                                  lang == "en"
                                      ? product.contentsEn.toString()
                                      : lang == "ar"
                                          ? product.contentsAr.toString()
                                          : product.contentsKu.toString(),
                                  textAlign: TextAlign.center,
                                  maxLines: 1,
                                  style: TextStyle(
                                      color: mainColorGrey.withOpacity(0.5),
                                      fontFamily: mainFontbold,
                                      fontSize: 11),
                                ),
                                const SizedBox(
                                  height: 3,
                                ),
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Text(
                                      addCommasToPrice(product.price2! > -1
                                          ? product.price2!
                                          : product.price!),
                                      maxLines: 1,
                                      style: TextStyle(
                                          decoration: checkOferPrice(product)
                                              ? TextDecoration.lineThrough
                                              : TextDecoration.none,
                                          color: checkOferPrice(product)
                                              ? mainColorRed
                                              : Colors.green,
                                          fontFamily: checkOferPrice(product)
                                              ? mainFontnormal
                                              : mainFontbold,
                                          fontSize: 14),
                                    ),
                                    checkOferPrice(product)
                                        ? const Text("/")
                                        : const SizedBox(),
                                    checkOferPrice(product)
                                        ? Text(
                                            addCommasToPrice(
                                                product.offerPrice!),
                                            maxLines: 1,
                                            style: TextStyle(
                                                color: Colors.green,
                                                fontFamily: mainFontbold,
                                                fontSize: 14),
                                          )
                                        : const SizedBox(),
                                  ],
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          GestureDetector(
                            onTap: () {
                              if (!isLogin) {
                                loiginPopup(context);
                                return;
                              }
                              final cartItem = CartItem(product: product.id!);
                              cartProvider.addFavToCart(cartItem);
                            },
                            child: Padding(
                              padding: const EdgeInsets.only(left: 6.0),
                              child: isFavInCart
                                  ? Icon(LineIcons.heartAlt,
                                      color: mainColorRed,
                                      size: getHeight(context, 3.5))
                                  : Icon(LineIcons.heart,
                                      color: mainColorBlack,
                                      size: getHeight(context, 3.5)),
                            ),
                          ),
                          // isItemInCart
                          //     ? // button
                          Padding(
                            padding: EdgeInsets.all(6),
                            child: AnimatedContainer(
                              padding: EdgeInsets.all(4),
                              width: isItemInCart ? 110 : 30,
                              height: isItemInCart ? 30 : 30,
                              duration: Duration(milliseconds: 600),
                              decoration: BoxDecoration(
                                  color: mainColorGrey.withOpacity(0.1),
                                  borderRadius: BorderRadius.circular(20),
                                  border: Border.all(
                                      color: mainColorGrey.withOpacity(0.2))),
                              child: isItemInCart
                                  ? FlipInX(
                                      delay:
                                          const Duration(milliseconds: 300),
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceAround,
                                        children: [
                                          GestureDetector(
                                            onTap: () {
                                              final cartItem = CartItem(
                                                  product: product.id!);
                                              cartProvider
                                                  .removeFromCart(cartItem);
                                            },
                                            child: Icon(Icons.remove,
                                                color: mainColorBlack,
                                                size:
                                                    getHeight(context, 2.5)),
                                          ),
                                          Text(
                                            count.toString(),
                                            style: TextStyle(
                                              fontSize: 16,
                                              color: mainColorBlack,
                                            ),
                                          ),
                                          GestureDetector(
                                            onTap: checkProductStock(
                                                        product, count) ||
                                                    checkProductLimit(
                                                        product, count)
                                                ? null
                                                : () {
                                                    final cartItem = CartItem(
                                                        product: product.id!);
                                                    cartProvider
                                                        .addToCart(cartItem);
                                                  },
                                            child: Icon(LineIcons.plus,
                                                color: checkProductStock(
                                                            product, count) ||
                                                        checkProductLimit(
                                                            product, count)
                                                    ? mainColorGrey
                                                        .withOpacity(0.5)
                                                    : mainColorBlack,
                                                size:
                                                    getHeight(context, 2.5)),
                                          ),
                                        ],
                                      ),
                                    )
                                  : GestureDetector(
                                      onTap: () {
                                        if (!isLogin) {
                                          loiginPopup(context);
                                          return;
                                        }
                                        final cartItem =
                                            CartItem(product: product.id!);
                                        cartProvider.addToCart(cartItem);
                                      },
                                      child: Icon(LineIcons.plus,
                                          color: mainColorBlack,
                                          size: getHeight(context, 2)),
                                    ),
                            ),
                          )
                        ],
                      ),
                    ],
                  ),
                  checkOferPrice(product)
                      ? Padding(
                          padding: const EdgeInsets.only(top: 8.0),
                          child: Container(
                              width: getWidth(context, 10),
                              height: getWidth(context, 6),
                              decoration: BoxDecoration(
                                borderRadius: lang == "en"
                                    ? const BorderRadius.only(
                                        //  topLeft: Radius.circular(20.0),
                                        topRight: Radius.circular(5.0),
                                        // bottomLeft: Radius.circular(0.0),
                                        bottomRight: Radius.circular(5.0),
                                      )
                                    : const BorderRadius.only(
                                        topLeft: Radius.circular(5.0),
                                        bottomLeft: Radius.circular(5.0),
                                      ),
                                color: mainColorRed,
                              ),
                              child: Center(
                                child: Text(
                                  calculatePercentageDiscount(
                                      double.parse(product.price2 > -1
                                          ? product.price2!.toString()
                                          : product.price!.toString()),
                                      double.parse(
                                          product.offerPrice!.toString())),
                                  style: TextStyle(
                                      color: mainColorWhite,
                                      fontFamily: mainFontnormal,
                                      fontSize: 12),
                                ),
                              )),
                        )
                      : const SizedBox(),
                ],
              ),
            ),
          );